 Javascript (linguagem voltada a objetos)

Variáveis
- no javascript moderno, pode-se utiliza  "var" para se referir a uma variável ou então "let."
	ex.: 	var n1 = 5; ->	a variável "n1" vai receber o valor "5", ou seja, trata-se de uma variável numérica.

Obs: exitem diversos tipos de variáveis em javascript, as primordiais e mais básicas são:

	-number: 	números no geral (5 ,18, 0.5, 3.14, etc)
	-string:	cadeias de caracteres ("google", 'javascript',`Maria`, "021.951.503-43", etc).
	-boolean:	apresenta apenas dois valores "true" e "false"

- string: variável que recebe texto. Podem ser escritas de três formas, cada uma com seu significado.
	ex.: 	var s1 ="javascript";
		var s2 ='curso em vídeo';
		var s3 =`guanabara`;

- identificadores: é a maneira de identificar uma variável em javascript e obedece algumas regras:

	.podem começar com letra, $ ou _.
	.NÃO pode começar com números.
	.é possível usar letras ou números.
	.é possível usar acentos e símbolos.
	.não podem conter espaços (usar "_" no lugar).
	.NÃO pode usar palavras reservadas (function, alert, var, etc).

	.dicas para a criação de variáveis:
		
		-maiúsculas e minúsculas fazem diferença (Casa é diferente de casa).
		-tente escolher nomes coerentes para as variáveis.
		-evite se tornar um "programador alfabeto" ou um "programador contador", ou seja, que criam variáveis apenas com números ou letras sem coerência
		com o dado a ser armazenado na variável.

Obs: para utilizar o NODE.JS (ou o BASH) no VScode, basta abrir o terminal (ou ctrl+shift+') e digitar "node", sem as aspas. Para sair do NODE no terminal aberto
basta digitar ".exit" e para sair do terminal aberto, basta digitar "exit" e depois dar "enter". Para limpar a tela de um terminal (limpar e não sair), basta apertar
"ctrl+L".

- typeof: comando que retorna o tipo de variável. Quando uma variável é criada, ela não é predefinida de um tipo. Ela ganha aquele tipo a depender do valor recebido
por ela. Ex.: no node do terminal do VScode, atribua o valor "200" a uma vatiável qualquer "n" (var n = 200). Em seguida digite "typeof n" e será retornado 'number'.

Obs: se uma variável receber o valor de um número entre aspas ("200"), o programa entenderá esse número como sendo uma string.

Explicando o código

	<script> //as mensagens abaixo serão exibidas primeiramente        
        	var nome = window.prompt('Qual o seu nome?')
        	//tudo o que for recebido em window.prompt será recebido pela variável chamada "nome"//
        	window.alert ('É um prazer em te conhecer, ' + nome + '!'); // "+" concatenação
    	</script>

<script></script> ->				local onde será inserido (dentro do arquivo de html) o código de javascript
var nome = window.prompt('Qual o seu nome?')	indica que, dentro do prompt estabelecido (window.prompt), o que for digitado será armazenado (atribuído) em uma 
						variável chamada "nome"
window.alert ('É um prazer em te conhecer, ' 
+ nome + '!') ->				comando para a página web exibir algo que, nesse caso, por meio de concatenação (+) será oq que estiver armazenado na
						variável "nome" e um ponbto de exclamação (!).

Obs: o javascript possui alguns comandos básicos:

	-window.alert('Minha primeira mensagem!'); ->	exibe uma mensagem de alerta (não pergunta nada. Apenas alerta)
        -window.confirm('Está gostando de JS?'); ->	exibe uma pergunta e o usuário precisa escolher uma opção
        -window.prompt('Qual o seu nome?') ->		exibe um espaço para o usuário inserir algo
	-document.write('Bem-vindo!') ->		escreve no body do arquivo html o que está no parênteses

Concersão de dados em javascript

-ao inserir um dado por meio de um prompt, talvez seja necessário especificar ao javascript o seu tipo. Ex.:

	<script>
		var n1 = window.prompt('Digite um número');
        	var n2 = window.prompt('Digite outro número');
        	var s = n1 + n2;        
        	window.alert ('A soma dos valores é ' + s + '!');         
	</script>

No exemplo acima, supondo que foi inserido "4" na primeira variável e "2" na segunda, o "window.alert" retornará na tela "42" ao invés de "6". Isso porque ele entende o que 
foi inserido como uma string ao invés de números, concatenando (juntando) os dois ao invés de somá-los. Para corrigir o erro e atingir o objetivo de soma, será 
necessário transformar de string para número. A conversão é feita já na declaração da variável e existem três formas basicamente:

	-Number.parseInt(n) ->		para tranformar em número inteiro (sem vírgula)
						.var n1 = Number.parseInt(window.prompt('Digite um número'));
						.var n2 = Number.parseInt(window.prompt('Digite outro número'));
	-Number.parseFloat(n) ->	para tranformar em número real (com vírgula)
						.var n1 = Number.parseFloat(window.prompt('Digite um número'));
						.var n2 = Number.parseFloat(window.prompt('Digite outro número'));
	-Number(n) ->			para tranformar em número a depender do javascript (o que ele entender que faz sentido com o que foi inserido)
						.var n1 = Number(window.prompt('Digite um número'));
						.var n2 = Number(window.prompt('Digite outro número'));

Também é possível transformar de número para string:

	-String(n)
		.window.alert('A soma dos valores é ' + String(s) + '!');
		
	-n.toString()
		.window.alert('A soma dos valores é ' + s.toString() + '!');

Nos exemplos acima, a variável "s" é um número resultante da soma de dois outros números. Caso deseje que ele seja considerado uma string, é preciso fazer a conversão.

Template string

Observe o código abaixo:

	<script>
		var nome ='Filipe';
		var idade = 41;
		var nota = 5.5;
	</script>

Para dar um comando retornando os três valores numa setença, é possível da seguinte maneira:

	<script>
		var nome ='Filipe';
		var idade = 41;
		var nota = 5.5;
		window.alert ('O aluno ' + nome + ' com '+ idade + ' anos tirou a nota '+ nota)
	</script>

No exemplo acima, o texto corrido está entre aspa simples e, por meio de concatenação, as respectivas variáveis são inseridas (nome, idade e nota). Porém, existe uma
forma mais prática e simples de compreender de inserir as variáveis por meio de template strings:

	<script>
		var nome ='Filipe';
		var idade = 41;
		var nota = 5.5;
		window.alert(`O aluno ${nome} com ${idade} anos tirou a nota ${nota}`)
	</script>

No caso, o template string é iniciado e finalizado pelo sinal de crase (`) e utiliza a estrutura ${} (placeholder) para inserir determinada variável.

Formatando strings: considere uma string qualquer "s" e um número qualquer "n"

	-s.lenght ->				quantos caracteres a string "s" tem
	-s.to UpperCase() ->			todos os caracteres da string "s" ficam MAIÚSCULOS
	-s.toLowerCase() ->			todos os caracteres da string "s" ficam minúsculos
	-n.toFixed(2) ->			em numeros reais, estabeklece a quantidades de casas decimais a aparecer. Nesse caso, duas.
	-n.toFixed(2).replace('.', ',')		estabelece duas casas decimais e altera o "." (ponto) po "," (vírgula)
	-n.toLocaleString('pt-br', {style: 'currency', currency: 'BRL'}) ->	vai mostra o número em forma da moeda local ('currency') estabelecida nos parâmetros,
										no caso "real brasileiro" (currency: 'BRL')

Operadores

-aritméticos (números)

	.+ ->	adição
	.- ->	subtração
	.* ->	multiplicação
	./ ->	divisão inteira. Ex.: 5 / 2 = 2.5
	.% ->	resto da divisão inteira. O que sobre de resto em um divisão inteira. Ex.: 5 % 2 = 1
	.** ->	potência. Ex.: 5 ** 2 = 25

Obs: precedência de operadores -> 5 + 3 / 2 = 6.5. Caso deseje calcular o "5 + 3" antes da divisão, utiliza-se o parênteses (5+3) /2 = 4

	.ordem de precedência: "()" --> "**" --> "*" --> "/" --> "%" --> "+" --> "-"

-atribuição

	.= ->			utilizado para atribuir dados em alguma variável. Ex.: var a = 5+3 (lê-se "variável a recebe o valor de 5 + 3")
	.auto-atribuição ->	var n = 3	--> o valor da variável n é 3
				n = n + 4
				n = 7		--> o novo valor de n é 7
	.simplificação ->		var n = 3
				n = n + 4 ou n+= 4	--> a simplificação pode ser ralizada quando há auto-referência. No caso, a variável n
				n = 7 
	.incremento ->		var n = 3	--> o valor inicial é 3
				n++		--> o novo valor é 4 
				n--		--> o novo valor é 2
-relacionais: o resultado da operação sempre será um valor booleano (true ou false)

	.>	maior que
	.<	menor que
	.>=	maior ou igual a
	.<=	menor ou igual a
	.==	igual a (avalia apenas o valor). Ex.: 5 (number) == '5' (string) --> true
	.===	idêntico irrestrito (mesmo valor e mesmo tipo). Ex.: 5 (number) == '5' (string) --> false
	.!=	diferente de (avalia apenas o valor). Ex.: 5 (number) != '5' (string) --> false
	.!==	desigual restrito (avalia o valor e o tipo). Ex.: 5 (number) == '5' (string) --> true (o valor é igual, mas o tipo é difrente)

-lógicos

	.!	negação
	.&&	conjunção (e)
	.||	disjunção (ou)

Obs: precedência de operadores lógicos ! --> && --> ||

-ternários: chama-se assim por possuir três partes. A primeira se trata de um teste, a segunda mostra o que será retornado caso o teste seja verdadeiro e o terceiro
mostra o que será retornado caso o teste seja falso

	.teste ? true : false. Ex.: média >= 7.0 ? "Aprovado" : "Reprovado"

DOM (Document Object Model)

-Árvore DOM
	
	.window (raiz):	tudo em javascript está contido em window. A janela do navegador é um objeto DOM. Exemplos de objetos contidos em window (não são os únicos):

		.location:	diz qual a localização do seu site, qual a URL, qual a página atual, qual a página anterior
		.history:	guarda de onde o usuário vem e pra onde vai, facilitando a navegação dentro do site
		.document:	diz qual o documento atual. Dentro do document existe outro objeto (o html):

			.html:	esqueleto do site. Possui basicamente dois "filhos"

				.head:	contém os meta dados e title
				.body:	é o que será exibido em tela (h1, p, div e etc)
		
					p:	parágrafo. Ainda pode ter um filho, como o strong (coloca determinada seção em negrito)]

Selecionando elementos dentro de uma árvore DOM

-por Marca (tag name):	getElementByTagName()[]

	.var p1 = window.document.getElementsByTagName('p')[0] 
	 window.document.write(p1.innerText)

		-var p1:		cria a variável p1
		-window:		elemento raiz do DOM
		-document:		documento filho de window
		-getElementsByTagName:	comando para selecionar por tag que no caso é a tag parágrafo (p)
		-('p'):			tag que será selecionada do documento que no caso é a tag parágrafo
		-[0]:			especifica de qual parágrafo se refere. No caso, refere-se ao primeiro parágrafo que aparece no documento [0]
		-write 
		(na segunda linha):	escreve no documento contido na tela (window.document)
		-(p1.innerText):	especifica o que será escrito em tela. No caso, será escrito o texto (somente o texto) contido (innerText) na variável p1. Por 
					exemplo, se no primeiro parágrafo do documento estiver escrito "Olá, mundo!", ele será escrito novamente. [EXTRA] O 
					HTMLElement.innerText pega o HTML inteiro, inclusive a tags filhas.

Obs: é possível fazer alterações de estilo por meio de javascript. Utilizando o exemplo acima, podemos fazer:

	.p1.style.color='blue':	altera a cor das letras do texto da variável p1 para azul, ou seja o texto do primeiro parágrafo.

-por ID:		getElementById()
	
-por Nome:		getElementsByName()[]
-por Classe:		getElementsByClassName()[]
-por Seletor (css):	querySelector() e querySelectorAll(). A seleção é feita por meio de elementos do css Ex.:

	var d = window.document.querySelector('div#msg') -->	está sendo selecionada a div que possui id ='msg' (se fosse uma "class", seria 'div.msg')
	var d = window.document.querySelectorAll('div') -->	está sendo selecionado todos os elementos div do documento

Obs: em css, um id é referenciado pelo "#" e uma class pelo ".".

Eventos DOM: ações que podem ser feitas com determinado elemento html

-mouseenter:	quando o cursor do mouse entra na área de determinado elemento
-mousemove:	quendo o curor do mouse se movimenta dentro da área de determinado elemento (disparado a cada movimento)
-mousedown:	quando o botão do mouse é clicado e segurado
-mouseup:	quando o botão do mouse clicado é soltado
-click:		quando ocorre um clique simples do mouse (sem segurar)
-mouseout:	quando o cursor do mouse, uma vez dentro da área de determinado elemento, sai

Funções: conjunto de linhas de código (bloco de código) que serão executadas apenas quando determinado evento ocorrer. São iniciadas com "function" seguida da ação e é
delimitada por "{}" como no modelo abaixo:

	.function ação(parâmetro){
		linha de código
	}

Detecção de erros em javascript: abra o devtools e localize um "x" vermelho no canto superior. Lá indicará onde está o erro (geralmente na linha anterior do que for 
apresentado.